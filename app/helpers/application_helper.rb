module ApplicationHelper
    class Hashit
      def initialize(hash)
        hash.each do |k,v|
          self.instance_variable_set("@#{k}", v.is_a?(Hash) ? Hashit.new(v) : v)
          self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})
          self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})
        end
      end
    end


   def intstrToSwfver(testStr)
      swfversion="unknown"
  	  case testStr
          when "10"
            swfversion="10.0"
          when "11"
            swfversion="10.2"
  	      when "14"
            swfversion="11.1"
          when "15"
            swfversion="11.2"
          when "20"
            swfversion="11.7"
          else
  	     	 swfversion="unknown"
       end
  	return swfversion
	end




def tr( *str )
	#str.each {  }  
  p str
  
end


def swfverToIntstr(testStr)
  case testStr
      when "10.0"
        testStr="10"
      when "10.2"
        testStr="11"
      when "11.1"
        testStr="14"
      when "11.2"
        testStr="15"
      when "11.7"
        testStr="20"
      else
        testStr="10"
     end
  return testStr
end





 def  exportCampaignSetting(s3settingkey)
    #default_setting = ' {"utmobj" : {"mojn": { "rt": "utm_source=Mojn&utm_medium=banner&utm_campaign=retargeting", "def": "utm_source=Mojn&utm_medium=banner&utm_campaign=retargeting-default", "front": "utm_source=Mojn&utm_medium=banner&utm_campaign=retargeting-front" }}'
    Rails.logger.error s3settingkey 

    if  !getS3obj(s3settingkey, Rails.root.to_s + "/tmp/tmp_config.json" )
      Rails.logger.error "s3settingkey : " + s3settingkey 
        opt ={}
        opt["contenttype"] = "application/json"
        uploadS3( Rails.root.to_s  + "/config/defaultSetting.json", s3settingkey , opt)
    else
      Rails.logger.error "! s3settingkey: " + s3settingkey + "is exist"
        puts  s3settingkey + " is exist"
    end 
end



  def escapechar(mod)
   mod = mod.to_s.gsub("Dropbox \(Personal\)","Dropbox")
   return mod
  end
  

  def mapBannerName(width , height)
    teststring=width.to_s + "x" + height.to_s
     case teststring
     	when "930x180"
     	   return "Large Leaderboard"
     	when "728x90"
     	   return "Leaderboard"
     	when "300x250"
     	   return "Square"
     	when "160x600"
     	   return "Large Skyscraper"
     	when "120x600"
     	   return "Skyscraper"
     	else
     	   return "Customized Banner"
     	end   

  end  
  
  def bannertype(export)
    
    return export.campaign.template_type.to_s
    #  FIXED_BANNER = 'fixed_banner'
    #  DYNAMIC_BANNER = 'dynamic_banner'
    #  AUTOGENERATED_BANNER = 'autogenerated_banner'
    #  LASTPRODUCTSEEN_BANNER = 'lastproductseen_banner'
    #  HTML_BANNER = 'html_banner'
    #  LIBRARY_BANNER = 'library_banner'
  end

  # def debug(msg)
  #   puts msg + " at #{Time.now} "
  # end
  	

  def exportFail(export,errmsg)
    export.failAndSentMail(export,errmsg)
     export.update_attribute(:done, 9)
  end



  def replaceHtml(inputCon,export)
             inputCon.gsub!('{swfversion}', intstrToSwfver(export.option_str).to_s)
             inputCon.gsub!('{title}', "EAP: " + export.account.name + " >> " + export.campaign.name)
             inputCon.gsub!('{crm_flag}', export.crm_flag.to_s)
             inputCon.gsub!('{hosts3_flag}', export.hosts3_flag.to_s)
             inputCon.gsub!('{campaignname}', export.campaign.name.to_s)
             inputCon.gsub!('{campaignid}', export.campaign.id.to_s)
             inputCon.gsub!('{adservertag}', export.tag.to_s)
             inputCon.gsub!('{bannertype}', export.banner_type.to_s)
             inputCon.gsub!('{taskname}', export.name.to_s) 
             inputCon.gsub!('{downloadall}', export.campaign.id.to_s + '.zip')    
             inputCon.gsub!('{customername}', export.account.name.to_s)    
            return inputCon
   end
  





end
